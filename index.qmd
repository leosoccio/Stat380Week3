---
title: "Week 3 Summary"
author: "Leo Soccio"
title-block-banner: true
title-block-style: default
toc: true
format: html
# format: pdf
---

------------------------------------------------------------------------

## Tuesday, Jan 17

::: callout-important
## TIL

Include a *very brief* summary of what you learnt in this class here.

Today, I learnt the following concepts in class:

1.  Reading in files
2.  Reviewed basic dyplr functions
3.  Reviewed basic ggplot2 functions
:::

Provide more concrete details here. You can also use footnotes[^1] if you like

[^1]: You can include some footnotes here

#### Reading in files

Manually hard coding data into R (tedious for data sets any larger than this):

```{R}
data_hard_code <- data.frame(
  Name = c("Alice", "Bob", "Charlie"),
  Age = c(21,25,35),
  Height = c(5.5,6.2,5.9)
)

data_hard_code
```

Reading in a csv file:

```{R}
data_from_csv <- read.csv("./data12423.csv")

data_from_csv
```

More advanced and efficient methods to read files:

-   "read_csv" from tidyverse

-   "data.table" package in R

#### Now that we have a dataset, we can begin to analyze it.

dyplr and ggplot2 are very helpful for **Exploratory Data Analysis.**

##### dyplr

dyplr provides a set of "verbs" for manipulating data.

We will use the mpg dataset as an example.

```{R}
library(ggplot2)
library(dplyr)
head(mpg,5)
```

We will also look at the Iris dataset.

```{R}
head(iris,5)
```

**Cleaning datasets:**

-   Distinct cases where a particular variable's values are of the same data type.
-   Every observation has its own row, every variable has its own column

This is what dyplr is for.

Examples:

```{R}
mpg%>%
  select(c(model,displ)) # selects particular columns

iris%>%
  mutate(Sepal_Area = Sepal.Length * Sepal.Width) # creates a new variable based on existing ones

mpg%>%
  filter(class == "compact") # selects particular cases based on a set of criteria


```

Other verbs include summary(), pivot_longer(), pivot_wider(), left_join(), inner_join(), etc.

##### ggplot2

-   The "gg" in ggplot2 stands for "Grammar of Graphics". There is NO ggplot1.

Quick example:

```{R}
plt <- ggplot(iris) # use the iris dataset for ggplot

plt + geom_point(aes(x=Petal.Length, y=Sepal.Length)) # add points to the graph

plt + geom_point(aes(x=Petal.Length, y=Sepal.Length, color=Species)) # color by species

plt + geom_point(aes(x=Petal.Length, y=Sepal.Length, color=Species)) +
  geom_smooth(aes(x=Petal.Length, y=Sepal.Length, group=Species), method="lm", se=FALSE) # create a linear trendline for each species' data without the standard error margins
```

## Thursday, Jan 19

::: callout-important
## TIL

Include a *very brief* summary of what you learnt in this class here.

Today, I learnt the following concepts in class:

1.  How to use the ggThemeAssist package
2.  Basics of the forcats package and factors
3.  Basics of the map() function
4.  Brief purrr introduction
:::

Provide more concrete details here:

#### ggthemeassist

```{R}
ggplot(mpg) +
  geom_point(aes(x=displ, y=hwy)) + theme(plot.background = element_rect(fill = "white")) +labs(title = "Plot of Displacement vs Highway Miles per Gallon",
    x = "Displacement", y = "Highway mpg")

# highlight code --> "addins" at top of RStudio --> ggThemeAssist
```

#### More on data types

1.  string, ex. "this is a string"
2.  integer, ex. 3
3.  double, ex. 2.24
4.  booleans, ex. TRUE
5.  **Factors** for categorical variables.

##### Factors and forcats package

Factors are used in categorical variables, let's look at an example:

"var" contains the country code for people in North America

```{R}
var <- c(
  "USA",
  "USA",
  "CAN",
  "CAN",
  "CAN",
  "CAN",
  "MEX",
  "MEX"
  )
var
```

To tell R that this is categorical and not just a vector of strings, specify using as.factor()

```{R}
as.factor(var)
```

Another example:

```{R}
head(iris,3)

iris$Species
```

Also look at mpg

```{R}
head(mpg, 3)
as.factor(mpg$class)
```

When working with data, we will often need to specify the data type so keeping track of things like this is very useful.

The forcats package is useful when working with factors:

```{R}
library(forcats)
manufacturer <- as.factor(mpg$manufacturer)
fct_reorder(manufacturer, mpg$hwy, min)
```

We will return to this in a few weeks for logistic regression.

##### purr package

This package provides functional programming tools. Example:

Consider this task:

1.  Take a number i
2.  Create a matrix with random entries of dimension i times i
3.  Compute the average of the elements of the matrix
4.  Print result

```{R}
#using for
results<-c()
for(i in 1:10){
  M <- matrix(
    runif(i*i), nrow=i
  )
  results[i]<- mean(M)
}
results
```

A functional way to approach the same problem: i -\> M\[ixi\] -\> mean(M)

```{R}
library(purrr)
map(
  1:10,
  function(i){
    mean(
      matrix(
        c(1:i*i), nrow=i
      )
    )
  }
)
```
